#
# Automated Release Workflow
#
# This workflow allows for manually triggering a release from the GitHub Actions UI.
# It automates version bumping, deployment, tagging, and GitHub Release creation.
#
# Required Secrets:
# - GH_PAT: A Personal Access Token with 'repo' scope to push commits and tags.
# - GPG_PRIVATE_KEY: The GPG private key for signing.
# - GPG_PASSPHRASE: The passphrase for the GPG key.
# - CENTRAL_USERNAME: The username for Maven Central deployment.
# - CENTRAL_PASSWORD: The password for Maven Central deployment.
#

name: Automated Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The version to release (e.g., 1.0.0)'
        required: true

jobs:
  release:
    name: Perform Automated Release
    runs-on: ubuntu-latest
    environment: sonatype
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up JDK 8 for compilation
        uses: actions/setup-java@v5
        with:
          java-version: 8
          distribution: 'temurin'
          cache: maven

      - name: Set release version
        run: |
          echo "Setting version to ${{ github.event.inputs.release_version }}"
          ./mvnw versions:set -DnewVersion=${{ github.event.inputs.release_version }} -DgenerateBackupPoms=false

      - name: Commit release version
        run: |
          git commit -am "[CI] Prepare release v${{ github.event.inputs.release_version }}"

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Deploy to Maven Central
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_PASSWORD: ${{ secrets.CENTRAL_PASSWORD }}
        run: |
          ./mvnw deploy -B -V -ntp -P release -s .mvn/settings.xml

      - name: Tag the release
        run: |
          echo "Tagging release v${{ github.event.inputs.release_version }}"
          git tag -a "v${{ github.event.inputs.release_version }}" -m "Release v${{ github.event.inputs.release_version }}"

      - name: Set next development version
        shell: bash
        run: |
          version=${{ github.event.inputs.release_version }}
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}-SNAPSHOT"
            echo "Next development version is $next_version"
            ./mvnw versions:set -DnewVersion=$next_version -DgenerateBackupPoms=false
          else
            echo "::error::Could not determine next development version from $version"
            exit 1
          fi

      - name: Commit next development version
        run: |
          git commit -am "[CI] Prepare for next development iteration"

      - name: Push changes and tags
        run: git push --follow-tags

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: v${{ github.event.inputs.release_version }}
        run: |
          gh release create "$TAG_NAME" --verify-tag --generate-notes --title "Release $TAG_NAME"